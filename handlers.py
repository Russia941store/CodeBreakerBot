from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from logic import (
    generate_code_set,
    build_keyboard,
    is_correct_code,
    add_attempt,
    grant_extra_attempt,
    reset_game,
    game_state,
)

def wrap_buttons(keyboard):
    return [[InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"])] for btn in keyboard]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    generate_code_set(user_id)
    keyboard = build_keyboard(user_id)
    await update.message.reply_photo(
        photo="https://i.imgur.com/LtN1KxJ.jpeg",
        caption=(
            "üîê –ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π *—Å–µ–π—Ñ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–¥–æ–º*.\n"
            "–£–≥–∞–¥–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π *4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥* –∏–∑ —Å–ø–∏—Å–∫–∞. –£ —Ç–µ–±—è –µ—Å—Ç—å *3 –ø–æ–ø—ã—Ç–∫–∏*! üí•\n\n"
            "_–ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–µ—à—å ‚Äî –∑–∞–±–µ—Ä—ë—à—å –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–µ–π—Ñ–∞!_"
        ),
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(wrap_buttons(keyboard))
    )

async def handle_code_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = game_state.get(user_id)
    if not data:
        await query.edit_message_text("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start.")
        return
    if data.get("game_over", False):
        return
    if not query.data.startswith("code_"):
        return

    code = int(query.data.split("_")[1])

    if is_correct_code(user_id, code):
        msg = f"ü•≥ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∫–æ–¥ `{code}` –ø–æ–¥–æ—à—ë–ª!*\n\nüéÅ –û—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 1000 —Ä—É–±–ª–µ–π –∏ —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –∑–∞—Ä—è–¥–∫–∏ (—Å–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è).\n\nüí¨ –ü–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –ø—Ä–∏–∑, –∞–≥–µ–Ω—Ç!"
        data["game_over"] = True
        await update_photo_message(query, msg, photo="https://i.imgur.com/TOk27xV.jpeg")
        return

    add_attempt(user_id, code)
    attempts = len(data["attempts"])

    if attempts < 3:
        remaining = 3 - attempts
        msg = f"üö´ –ö–æ–¥ *{code}* –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –ª–∞–∑–µ—Ä—ã –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω—ã.\n\nüî¢ –í–≤–æ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining}*."
        await update_photo_message(query, msg, photo="https://i.imgur.com/kFspFsU.jpeg", keyboard=build_keyboard_markup(user_id))
        return

    if attempts == 3 and not data.get("extra_attempt_used", False):
        text = (
            "üö® –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –∫–æ–¥ –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏ - –æ—Ö—Ä–∞–Ω–∞ —É–∂–µ –≤—ã–µ—Ö–∞–ª–∞ –Ω–∞ –º–µ—Å—Ç–æ.\n\n"
            "üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ –Ω–∞ –∫–∞–Ω–∞–ª `@store941_ekb`, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –ø–æ–ª—É—á–∏—Ç—å 4-—é –ø–æ–ø—ã—Ç–∫—É."
        )
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/store941_ekb")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="confirm_restart")]
        ])
        await update_photo_message(query, text, photo="https://i.imgur.com/zr43TCd.jpeg", keyboard=markup)
        return

    msg = (
        f"üêï‚Äçü¶∫ –ö–æ–¥ *{code}* –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–º. –ù–∞ –º–µ—Å—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª–∞ –∑–ª–∞—è –æ—Ö—Ä–∞–Ω–∞ ‚Äî –º–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞.\n\n"
        "üéÅ –ù–æ –ø–µ—Ä–µ–¥ –ø–æ–±–µ–≥–æ–º, –≤—ã –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ 500 –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –≤ 9:41 Store!\n\n"
        "üí¨ –ü–æ–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É!"
    )
    data["game_over"] = True
    await update_photo_message(query, msg, photo="https://i.imgur.com/OyKepEO.jpeg")

async def confirm_restart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    data = game_state.get(user_id)
    if not data or len(data["attempts"]) != 3 or data.get("extra_attempt_used", False):
        await query.message.reply_text("‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    granted = grant_extra_attempt(user_id)
    if not granted:
        await query.message.reply_text("‚ö†Ô∏è –î–æ–ø. –ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")
        return

    data["game_over"] = False
    await query.message.reply_photo(
        photo="https://i.imgur.com/bOEtJD6.jpeg",
        caption="üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\nüéß –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è ‚Äî 4-—è –ø–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞—Ç—å —Å–µ–π—Ñ. –£–¥–∞—á–∏, –∞–≥–µ–Ω—Ç!",
        parse_mode="Markdown",
        reply_markup=build_keyboard_markup(user_id)
    )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    reset_game(user_id)

    welcome_text = (
        "–ê–≥–µ–Ω—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ú–∏—Å—Å–∏—é –í–∑–ª–æ–º¬ª –æ—Ç 9:41 Store!\n\n"
        "üîç –ü—Ä–∞–≤–∏–ª–∞:\n\n"
        "‚Äî 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –≤–∑–ª–æ–º –∫–æ–¥–∞.\n"
        "‚Äî –ü–æ—Å–ª–µ 3 –æ—à–∏–±–æ–∫ ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å 4‚Äë—é –ø–æ–ø—ã—Ç–∫—É.\n"
        "‚Äî –ó–∞ —É—Å–ø–µ—à–Ω—ã–π –≤–∑–ª–æ–º ‚Äî –Ω–∞–≥—Ä–∞–¥–∞!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–∏—Å—Å–∏—é¬ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–∏—Å—Å–∏—é", callback_data="start_game")]
    ])

    await update.message.reply_photo(
        photo="https://i.imgur.com/HEPSIpi.jpeg",
        caption=welcome_text,
        reply_markup=keyboard
    )

async def start_game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    reset_game(user_id)
    generate_code_set(user_id)

    await query.message.reply_photo(
        photo="https://i.imgur.com/kFspFsU.jpeg",
        caption="üéß –ê–≥–µ–Ω—Ç, –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞–ø—É—â–µ–Ω.\n\nüî¢ –ü–µ—Ä–µ–¥ –≤–∞–º–∏ 10 –∫–æ–¥–æ–≤—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π ‚Äî –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤–∑–ª–æ–º—É!",
        reply_markup=build_keyboard_markup(user_id)
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def build_keyboard_markup(user_id):
    raw = build_keyboard(user_id)
    buttons = [InlineKeyboardButton(item["text"], callback_data=item["callback_data"]) for item in raw]
    rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    return InlineKeyboardMarkup(rows)

async def update_photo_message(query, text, photo=None, keyboard=None):
    if photo:
        await query.edit_message_media(
            media={"type": "photo", "media": photo, "caption": text, "parse_mode": "Markdown"},
            reply_markup=keyboard
        )
    else:
        if query.message.photo:
            await query.edit_message_caption(caption=text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=keyboard)